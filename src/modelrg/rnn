
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose
import statsmodels.graphics.tsaplots as sgt
from statsmodels.tsa.stattools import adfuller, kpss

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

import wandb

# Iniciar sesión en wandb
wandb.login()

# Suponiendo que 'data' es un DataFrame y ya está cargado
# data = pd.read_csv('path_to_your_data.csv') # Asegúrate de cargar tus datos correctamente

# Dividir en conjuntos de entrenamiento, validación y prueba
train_size = int(len(data) * 0.7)
val_size = int(len(data) * 0.15)
test_size = len(data) - train_size - val_size

train_data, val_data, test_data = data[:train_size], data[train_size:train_size+val_size], data[train_size+val_size:]

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data)-seq_length):
        X.append(data.iloc[i:i+seq_length].values)
        y.append(data.iloc[i+seq_length].values)
    return np.array(X), np.array(y)

# Definir la longitud de la secuencia
seq_length = 5

# Crear secuencias de entrenamiento
X_train, y_train = create_sequences(train_data, seq_length)
X_val, y_val = create_sequences(val_data, seq_length)
X_test, y_test = create_sequences(test_data, seq_length)

# Asegurarse de que las entradas tengan la forma correcta para RNN (samples, timesteps, features)
X_train = np.expand_dims(X_train, axis=-1)
X_val = np.expand_dims(X_val, axis=-1)
X_test = np.expand_dims(X_test, axis=-1)

# Imprimir las formas de los conjuntos de datos de entrenamiento, validación y prueba
print("Forma de X_train:", X_train.shape)
print("Forma de y_train:", y_train.shape)
print("Forma de X_val:", X_val.shape)
print("Forma de y_val:", y_val.shape)
print("Forma de X_test:", X_test.shape)
print("Forma de y_test:", y_test.shape)

# Definir el modelo de RNN
model_rnn = Sequential([
    SimpleRNN(10, input_shape=(seq_length, 1)),
    Dense(1)
])

# Compilar el modelo
model_rnn.compile(optimizer='adam', loss='mean_squared_error')

# Iniciar un run en wandb
run = wandb.init(project='Integradorpj-2024', name="rnn")

# Entrenar el modelo
history_rnn = model_rnn.fit(X_train, y_train, epochs=30, batch_size=8, verbose=1, validation_data=(X_val, y_val))

# Realizar predicciones
train_predictions_rnn = model_rnn.predict(X_train)
val_predictions_rnn = model_rnn.predict(X_val)
test_predictions_rnn = model_rnn.predict(X_test)

# Registrar métricas en wandb
wandb.log({
    "train_loss": mean_squared_error(y_train, train_predictions_rnn),
    "val_loss": mean_squared_error(y_val, val_predictions_rnn),
    "test_loss": mean_squared_error(y_test, test_predictions_rnn)
})

# Guardar el modelo en wandb
model_path = "model_rnn.h5"
model_rnn.save(model_path)
wandb.save(model_path)

# Finalizar el run
wandb.finish()

